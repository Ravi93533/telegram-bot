import asyncio
import os
import re
import time
import threading
from flask import Flask
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions, BotCommandScopeAllPrivateChats
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

app_flask = Flask(__name__)

@app_flask.route("/")
def home():
    return "Bot ishlayapti!"

def run_web():
    app_flask.run(host="0.0.0.0", port=8080)

def start_web():
    threading.Thread(target=run_web).start()

TOKEN = os.getenv("TOKEN") or "YOUR_TOKEN_HERE"
WHITELIST = []
TUN_REJIMI = False
KANAL_USERNAME = None
FOYDALANUVCHILAR = set()

UYAT_SOZLAR = [
    "am", "amlatta", "amyalaq", "amyalar", "amyaloq", "amxor", "am yaliman", "am yalayman", "am latta", "aminga", "aminga ske", "aminga sikay", 
    "asshole", "bastard", "biyundiami", "bitch", "blyat", "buynami", "buyingdi omi", "buyingni ami", "buyundiomi", "dalbayob", "damn", "debil", 
    "dick", "dolboyob", "durak", "eblan", "fuck", "fucker", "gandon", "haromi", "horomi", "hoy", "idinnaxxuy", "idin naxuy", "idin naxxuy", 
    "isqirt", "jalap", "kal", "kot", "kotak", "ko't", "kotinga ske", "kotinga sikay", "kotinga", "ko'tinga", "kotingga", "kotvacha", "ko'tak", 
    "lanati", "lax", "motherfucker", "mudak", "naxxuy", "og'zingaskay", "og'zinga skay", "ogzingaskay", "otti qotagi", "otni qotagi", 
    "otti qo'tag'i", "ogzinga skay", "onagniomi", "onangniami", "pashol naxuy", "padarlanat", "lanat", "pasholnaxxuy", "pidor", 
    "poshol naxxuy", "posholnaxxuy", "poxxuy", "poxuy", "qanjik", "qanjiq", "qonjiq", "qotaq", "qotaqxor", "qo'taq", "qo'taqxo'r", 
    "qotagim", "kotagim", "qo'tag'im", "qotag'im", "qo'tagim", "sik", "sikaman", "sikay", "sikalak", "sikish", "sikishish", "skay", 
    "slut", "soska", "suka", "tashak", "tashaq", "toshoq", "toshok", "xaromi", "xoromi",
    "–∞–º", "–∞–º–ª–∞—Ç—Ç–∞", "–∞–º–∏–Ω–≥–∞", "–∞–º—è–ª–∞–∫", "–∞–º—è–ª–æ–∫", "–∞–º—Ö—û—Ä", "–∞–º—Ö—É—Ä", "–æ–º–∏–Ω", "–æ–º–∏–Ω–≥–∞", "–∞–º —è–ª–∏–º–∞–Ω", "–∞–º —è–ª–∞–π–º–∞–Ω", "–∏—Å–∫–∏—Ä—Ç", "–∂–∞–ª–∞–ø", 
    "–¥–∞–ª–±–∞—ë–±", "–¥–æ–ª–±–æ—ë–±", "–≥–∞–Ω–¥–æ–Ω", "–≥–æ–Ω–¥–æ–Ω", "–Ω–∞—Ö—É–π", "–∏–¥–∏ –Ω–∞—Ö—É–π", "–∏–¥–∏–Ω –Ω–∞—Ö—Ö—É–π", "–∏–¥–∏–Ω–Ω–∞—Ö—Ö—É–π", "–∫–æ—Ç", "–∫–æ—Ç–∞–∫", "–∫—É—Ç–∞–≥–∏–º", "“õ—û—Ç–∞“ì–∏–º",
    "–∫—É—Ç", "–∫—É—Ç–∞–∫", "–∫—É—Ç–∏–Ω–≥–≥–∞", "–∫—û—Ç", "–∫—û—Ç–∏–Ω–≥–≥–∞", "–ª–∞–Ω–∞—Ç–∏", "–Ω–∞—Ö—É–π", "–Ω–∞—Ö—Ö—É–π", "–æ–≥–∑–∏–Ω–≥–∞ —Å–∫–∞–π", "–æ–≥–∑–∏–Ω–≥–∞—Å–∫–∞–π", "–æ–Ω–∞–≥–Ω–∏–æ–º–∏", "–æ–Ω–∞–≥–Ω–∏ –æ–º–∏",
    "–æ–Ω–∞–Ω–≥–Ω–∏–∞–º–∏", "–æ–Ω–∞–Ω–≥–Ω–∏ –∞–º–∏", "–æ–≥–∑–∏–Ω–≥–∞ —Å–∫–µ–π", "–æ–≥–∑–∏–Ω–≥–∞ —Å–∏–∫–∞–π", "–æ—Ç–Ω–∏ –∫—É—Ç–∞–≥–∏", "–ø–∞—à–æ–ª –Ω–∞—Ö—É–π", "–ø–∞—à–æ–ª–Ω–∞—Ö—Ö—É–π", "–ø–∏–¥–æ—Ä", "–ø–æ—à–æ–ª –Ω–∞—Ö—Ö—É–π", 
    "–ø–æ—Ö—É–π", "–ø–æ—Ö—Ö—É–π", "–ø–æ—à–æ–ª–Ω–∞—Ö—Ö—É–π", "—Å–µ–∫–∏—Å", "—Å–∏–∫–∞–π", "—Å–∏–∫–∞–º–∞–Ω", "—Å–∏–∫–∏—à", "—Å–∏–∫–∏—à–∏—à", "—Å–æ—Å–∫–∞", "—Å—É–∫–∞", "—Ç–∞—à–∞–∫", "—Ç–∞—à–∞“õ", "—Ç–æ—à–æ–∫", 
    "—Ç–æ—à–æ“õ", "—Ö–∞—Ä–æ–º–∏", "“≥–∞—Ä–æ–º–∏", "“≥–æ—Ä–æ–º–∏", "“õ–æ—Ç–∞“õ", "—Å–∫–µ", "–ª–∞–Ω–∞—Ç", "–ª–∞–Ω–∞—Ç–∏", "–ø–∞–¥–∞—Ä–ª–∞–Ω–∞—Ç", "“õ–æ—Ç–∞“õ—Ö–æ—Ä", "“õ—û—Ç–∞“õ", "–∫—É—Ç–∞–∫", "“õ—û—Ç–∞“õ—Ö—û—Ä", 
    "“õ–∞–Ω–∂–∏–∫", "“õ–∞–Ω–∂–∏“õ", "“õ–æ–Ω–∂–∏“õ", "–∞–º", "–∞–º–ª–∞—Ç—Ç–∞", "–∞–º—è–ª–∞“õ", "–∞–º—è–ª–∞—Ä", "–±—É–π–∏–Ω–≥–¥–∏ –∞–º–∏", "–±—É–π–∏–Ω–≥–¥–∏ –æ–º–∏", "–±—É–π–∏–Ω–≥–Ω–∏ –∞–º–∏", "–±—É–π–∏–Ω–¥–∏ –æ–º–∏", 
    "–±—É–π–Ω–∞–º–∏", "–±–∏–π–∏–Ω–¥–∏ –∞–º–∏", "—Å–∫–∏–π", "—Å–∫–∞–π", "—Å–∏–∫–µ–π", "—Å–∏–∫", "–∫—É—Ç–∞–≥–∏–º", "—Å–∫–∞–º–∞–Ω", "—Ö—É–π", "xuy", "xuyna", "skey"
]

# ‚úÖ Kanalga obuna bo‚Äòlganmi
async def kanal_tekshir(update: Update):
    if not KANAL_USERNAME:
        return True
    try:
        user = update.message.from_user
        member = await update.get_bot().get_chat_member(KANAL_USERNAME, user.id)
        return member.status in ["member", "creator", "administrator"]
    except:
        return False

# ‚úÖ Reklama va so‚Äòkinish filtri ‚Äî to‚Äòliq so‚Äòzlar bilan
async def reklama_va_soz_filtri(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.message.from_user
        text = update.message.text
        chat_id = update.message.chat_id
        msg_id = update.message.message_id

        if not text or not user:
            return

        if user.id in WHITELIST or (user.username and user.username in WHITELIST):
            return

        if TUN_REJIMI:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            return

        if not await kanal_tekshir(update):
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            keyboard = [[InlineKeyboardButton("‚úÖ Men a‚Äôzo bo‚Äòldim", callback_data="kanal_azo")]]
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è {user.first_name}, siz kanalga a‚Äôzo emassiz!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        if re.search(r"(http|www\.|t\.me/|@|reklama|reklam)", text, re.IGNORECASE):
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            return

        sozlar = re.findall(r"\w+", text.lower())
        print("üì• Original text:", text)
        print("üîé Ajratilgan so‚Äòzlar:", sozlar)
        for soz in sozlar:
            if soz in UYAT_SOZLAR:
                print("‚ùå Bloklanadigan so‚Äòz:", soz)
                await update.message.delete()
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è {user.first_name}, guruhda so‚Äòkinish taqiqlangan!"
                )
                break
    except Exception as e:
        print(f"[Xatolik] reklama_va_soz_filtri: {e}")

# ‚úÖ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    FOYDALANUVCHILAR.add(update.effective_user.id)
    await update.message.reply_text("‚úÖ Bot ishga tushdi. So‚Äòkinish va reklama filtr ishlamoqda.")

# ‚úÖ /tun
async def tun(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TUN_REJIMI
    TUN_REJIMI = True
    await update.message.reply_text("üåô Tun rejimi yoqildi.")

# ‚úÖ /tunoff
async def tunoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TUN_REJIMI
    TUN_REJIMI = False
    await update.message.reply_text("üå§ Tun rejimi o‚Äòchirildi.")

# ‚úÖ Komandalarni ro‚Äòyxatga qo‚Äòshish
async def set_commands():
    await app.bot.set_my_commands(commands=[
        BotCommand("start", "Botni ishga tushurish"),
        BotCommand("tun", "Tun rejimini yoqish"),
        BotCommand("tunoff", "Tun rejimini o‚Äòchirish"),
    ], scope=BotCommandScopeAllPrivateChats())

# ‚úÖ Botni ishga tushirish
async def botni_ishga_tushur():
    await set_commands()
    print("‚úÖ Bot ishga tushdi...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    while True:
        await asyncio.sleep(1)

# ‚úÖ ApplicationBuilder
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("tun", tun))
app.add_handler(CommandHandler("tunoff", tunoff))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), reklama_va_soz_filtri))

# ‚úÖ Flask + polling ishga tushirish
if __name__ == "__main__":
    start_web()
    asyncio.get_event_loop().run_until_complete(botni_ishga_tushur())
